// Code generated by protoc-gen-go. DO NOT EDIT.
// source: docs/proto/merpaytype.proto

/*
Package merpaytype is a generated protocol buffer package.

It is generated from these files:
	docs/proto/merpaytype.proto

It has these top-level messages:
	Resp
	PayConfReq
	PayConf
	PayConfResp
*/
package merpaytype

import "github.com/golang/protobuf/proto"
import "fmt"
import "math"

import (
	"golang.org/x/net/context"
	"google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Resp_Flag int32

const (
	Resp_FAILED Resp_Flag = 0
	Resp_OK     Resp_Flag = 3
)

var Resp_Flag_name = map[int32]string{
	0: "FAILED",
	3: "OK",
}
var Resp_Flag_value = map[string]int32{
	"FAILED": 0,
	"OK":     3,
}

func (x Resp_Flag) String() string {
	return proto.EnumName(Resp_Flag_name, int32(x))
}
func (Resp_Flag) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Resp struct {
}

func (m *Resp) Reset()                    { *m = Resp{} }
func (m *Resp) String() string            { return proto.CompactTextString(m) }
func (*Resp) ProtoMessage()               {}
func (*Resp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PayConfReq struct {
	MID     int64 `protobuf:"varint,1,opt,name=mID" json:"mID,omitempty"`
	PayType int64 `protobuf:"varint,2,opt,name=payType" json:"payType,omitempty"`
}

func (m *PayConfReq) Reset()                    { *m = PayConfReq{} }
func (m *PayConfReq) String() string            { return proto.CompactTextString(m) }
func (*PayConfReq) ProtoMessage()               {}
func (*PayConfReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PayConfReq) GetMID() int64 {
	if m != nil {
		return m.MID
	}
	return 0
}

func (m *PayConfReq) GetPayType() int64 {
	if m != nil {
		return m.PayType
	}
	return 0
}

type PayConf struct {
	CName      string `protobuf:"bytes,1,opt,name=CName" json:"CName,omitempty"`
	CCID       int64  `protobuf:"varint,2,opt,name=CCID" json:"CCID,omitempty"`
	CTypeName  string `protobuf:"bytes,3,opt,name=CTypeName" json:"CTypeName,omitempty"`
	CFee       int64  `protobuf:"varint,4,opt,name=CFee" json:"CFee,omitempty"`
	PayFlag    string `protobuf:"bytes,5,opt,name=PayFlag" json:"PayFlag,omitempty"`
	SettleType int64  `protobuf:"varint,6,opt,name=SettleType" json:"SettleType,omitempty"`
}

func (m *PayConf) Reset()                    { *m = PayConf{} }
func (m *PayConf) String() string            { return proto.CompactTextString(m) }
func (*PayConf) ProtoMessage()               {}
func (*PayConf) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PayConf) GetCName() string {
	if m != nil {
		return m.CName
	}
	return ""
}

func (m *PayConf) GetCCID() int64 {
	if m != nil {
		return m.CCID
	}
	return 0
}

func (m *PayConf) GetCTypeName() string {
	if m != nil {
		return m.CTypeName
	}
	return ""
}

func (m *PayConf) GetCFee() int64 {
	if m != nil {
		return m.CFee
	}
	return 0
}

func (m *PayConf) GetPayFlag() string {
	if m != nil {
		return m.PayFlag
	}
	return ""
}

func (m *PayConf) GetSettleType() int64 {
	if m != nil {
		return m.SettleType
	}
	return 0
}

type PayConfResp struct {
	Flag Resp_Flag `protobuf:"varint,1,opt,name=Flag,enum=merpaytype.Resp_Flag" json:"Flag,omitempty"`
	Msg  string    `protobuf:"bytes,2,opt,name=Msg" json:"Msg,omitempty"`
	Data *PayConf  `protobuf:"bytes,3,opt,name=Data" json:"Data,omitempty"`
}

func (m *PayConfResp) Reset()                    { *m = PayConfResp{} }
func (m *PayConfResp) String() string            { return proto.CompactTextString(m) }
func (*PayConfResp) ProtoMessage()               {}
func (*PayConfResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PayConfResp) GetFlag() Resp_Flag {
	if m != nil {
		return m.Flag
	}
	return Resp_FAILED
}

func (m *PayConfResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *PayConfResp) GetData() *PayConf {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Resp)(nil), "merpaytype.Resp")
	proto.RegisterType((*PayConfReq)(nil), "merpaytype.PayConfReq")
	proto.RegisterType((*PayConf)(nil), "merpaytype.PayConf")
	proto.RegisterType((*PayConfResp)(nil), "merpaytype.PayConfResp")
	proto.RegisterEnum("merpaytype.Resp_Flag", Resp_Flag_name, Resp_Flag_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MerPayConf service

type MerPayConfClient interface {
	GetConf(ctx context.Context, in *PayConfReq, opts ...grpc.CallOption) (*PayConfResp, error)
}

type merPayConfClient struct {
	cc *grpc.ClientConn
}

func NewMerPayConfClient(cc *grpc.ClientConn) MerPayConfClient {
	return &merPayConfClient{cc}
}

func (c *merPayConfClient) GetConf(ctx context.Context, in *PayConfReq, opts ...grpc.CallOption) (*PayConfResp, error) {
	out := new(PayConfResp)
	err := grpc.Invoke(ctx, "/merpaytype.MerPayConf/GetConf", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MerPayConf service

type MerPayConfServer interface {
	GetConf(context.Context, *PayConfReq) (*PayConfResp, error)
}

func RegisterMerPayConfServer(s *grpc.Server, srv MerPayConfServer) {
	s.RegisterService(&_MerPayConf_serviceDesc, srv)
}

func _MerPayConf_GetConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayConfReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerPayConfServer).GetConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merpaytype.MerPayConf/GetConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerPayConfServer).GetConf(ctx, req.(*PayConfReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _MerPayConf_serviceDesc = grpc.ServiceDesc{
	ServiceName: "merpaytype.MerPayConf",
	HandlerType: (*MerPayConfServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConf",
			Handler:    _MerPayConf_GetConf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "docs/proto/merpaytype.proto",
}

func init() { proto.RegisterFile("docs/proto/merpaytype.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xcf, 0x4e, 0xf3, 0x30,
	0x10, 0xc4, 0xbf, 0x36, 0x69, 0xaa, 0x6e, 0xa5, 0x4f, 0xd1, 0xf2, 0x2f, 0x2a, 0x08, 0x21, 0x5f,
	0x80, 0x4b, 0x2b, 0x95, 0x0b, 0xe2, 0x86, 0x12, 0x02, 0x15, 0x14, 0x2a, 0xc3, 0x0b, 0x18, 0x58,
	0x7a, 0x69, 0x89, 0x1b, 0xfb, 0xe2, 0xa7, 0xe1, 0x55, 0x91, 0x37, 0x09, 0xcd, 0xa1, 0xb7, 0xdd,
	0xf1, 0xfc, 0x94, 0xd9, 0x09, 0x1c, 0x7f, 0x16, 0x1f, 0x66, 0xa2, 0xcb, 0xc2, 0x16, 0x93, 0x35,
	0x95, 0x5a, 0x39, 0xeb, 0x34, 0x8d, 0x59, 0x40, 0xd8, 0x2a, 0x42, 0x40, 0x28, 0xc9, 0x68, 0x31,
	0x82, 0x30, 0x5f, 0xa9, 0x25, 0x02, 0x44, 0xf9, 0xed, 0xec, 0xe9, 0x2e, 0x8b, 0xff, 0x61, 0x04,
	0xdd, 0x97, 0xc7, 0x38, 0x10, 0xd7, 0x00, 0x0b, 0xe5, 0xd2, 0xe2, 0xfb, 0x4b, 0xd2, 0x06, 0x63,
	0x08, 0xd6, 0xb3, 0x2c, 0xe9, 0x9c, 0x75, 0x2e, 0x02, 0xe9, 0x47, 0x4c, 0xa0, 0xaf, 0x95, 0x7b,
	0x73, 0x9a, 0x92, 0x2e, 0xab, 0xcd, 0x2a, 0x7e, 0x3a, 0xd0, 0xaf, 0x51, 0xdc, 0x87, 0x5e, 0xfa,
	0xac, 0xd6, 0xc4, 0xe4, 0x40, 0x56, 0x0b, 0x22, 0x84, 0x69, 0x3a, 0xcb, 0x6a, 0x90, 0x67, 0x3c,
	0x81, 0x41, 0xea, 0x71, 0x76, 0x07, 0xec, 0xde, 0x0a, 0x4c, 0xe4, 0x44, 0x49, 0x58, 0x13, 0x39,
	0x91, 0x4f, 0xb0, 0x50, 0xce, 0x1f, 0x90, 0xf4, 0xd8, 0xdf, 0xac, 0x78, 0x0a, 0xf0, 0x4a, 0xd6,
	0xae, 0x88, 0xe3, 0x45, 0xcc, 0xb4, 0x14, 0x61, 0x60, 0xf8, 0x77, 0x9b, 0xd1, 0x78, 0x59, 0xd5,
	0xc0, 0x19, 0xff, 0x4f, 0x0f, 0xc6, 0xad, 0xee, 0xfc, 0xfb, 0xd8, 0x3f, 0xca, 0xaa, 0xa9, 0x18,
	0x82, 0xb9, 0x59, 0x72, 0xf0, 0x81, 0xf4, 0x23, 0x9e, 0x43, 0x98, 0x29, 0xab, 0x38, 0xf2, 0x70,
	0xba, 0xd7, 0x86, 0x9b, 0x6f, 0xb0, 0x61, 0xfa, 0x00, 0x30, 0xa7, 0xb2, 0x29, 0xe6, 0x06, 0xfa,
	0xf7, 0x64, 0x79, 0x3c, 0xdc, 0xc5, 0xd0, 0x66, 0x74, 0xb4, 0x53, 0x37, 0xfa, 0x3d, 0xe2, 0x3f,
	0x7a, 0xf5, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x02, 0xa0, 0xec, 0xaa, 0xf0, 0x01, 0x00, 0x00,
}
